name: Build
on: [push]
jobs:
  linux:
    name: Linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup environment
        run: sudo ./.github/workflows/setup-environment.sh
      - name: Build
        run: |
          set -euxo pipefail
          # create a local buildx builder.
          docker buildx create \
            --name local \
            --driver docker-container \
            --driver-opt network=host \
            --use
          docker buildx ls
          # build the images for the given platforms.
          docker buildx build \
            --tag localhost:5000/example-docker-buildx-go \
            --output type=registry \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --progress plain \
            .
      - name: Show image manifest
        run: |
          set -euxo pipefail
          http get http://localhost:5000/v2/_catalog
          http get http://localhost:5000/v2/example-docker-buildx-go/tags/list
          http get \
            http://localhost:5000/v2/example-docker-buildx-go/manifests/latest \
            Accept:application/vnd.docker.distribution.manifest.list.v2+json
          skopeo inspect --raw docker://localhost:5000/example-docker-buildx-go
      - name: Execute native container
        run: |
          set -euxo pipefail
          docker rmi -f localhost:5000/example-docker-buildx-go
          docker run --rm -t localhost:5000/example-docker-buildx-go
      - name: Execute linux/arm64 emulated container
        run: |
          set -euxo pipefail
          docker rmi -f localhost:5000/example-docker-buildx-go
          docker run --platform linux/arm64 --rm -t localhost:5000/example-docker-buildx-go
      - name: Execute linux/arm/v7 emulated container
        run: |
          set -euxo pipefail
          docker rmi -f localhost:5000/example-docker-buildx-go
          docker run --platform linux/arm/v7 --rm -t localhost:5000/example-docker-buildx-go
      - name: Publish to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          image_name="$(basename "$GITHUB_REPOSITORY")"
          image_tag="staging--$(echo "$GITHUB_REF" | sed -E 's,^refs/tags/,,')-linux"
          skopeo copy --all \
            --dest-creds "$DOCKER_HUB_USER:$DOCKER_HUB_ACCESS_TOKEN" \
            docker://localhost:5000/example-docker-buildx-go \
            docker://docker.io/$DOCKER_HUB_USER/$image_name:$image_tag
  windows:
    name: Windows
    strategy:
      matrix:
        include:
          - os: windows-2019
            build_image: golang:1.18.4-windowsservercore-1809
            runtime_image: mcr.microsoft.com/windows/nanoserver:1809
            image_tag_suffix: windowsnanoserver-1809
          - os: windows-2022
            build_image: golang:1.18.4-windowsservercore-ltsc2022
            runtime_image: mcr.microsoft.com/windows/nanoserver:ltsc2022
            image_tag_suffix: windowsnanoserver-ltsc2022
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
      - name: Build
        run: |
          set -euxo pipefail
          docker build \
            --tag example-docker-buildx-go \
            --build-arg BUILDIMAGE=${{ matrix.build_image }} \
            --build-arg RUNTIMEIMAGE=${{ matrix.runtime_image }} \
            --file Dockerfile.windows \
            .
      - name: Execute native container
        run: |
          set -euxo pipefail
          docker run --rm example-docker-buildx-go
      - name: Publish to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          set -euxo pipefail
          image_name="$DOCKER_HUB_USER/$(basename "$GITHUB_REPOSITORY")"
          image_tag="staging--$(echo "$GITHUB_REF" | sed -E 's,^refs/tags/,,')-${{ matrix.image_tag_suffix }}"
          # login into docker hub.
          docker login --username "$DOCKER_HUB_USER" --password-stdin <<EOF
          $DOCKER_HUB_ACCESS_TOKEN
          EOF
          # publish.
          docker tag example-docker-buildx-go "$image_name:$image_tag"
          docker push "$image_name:$image_tag"
  publish:
    name: Publish
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [linux, windows]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Publish to Docker Hub
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          set -euxo pipefail

          image_name="$DOCKER_HUB_USER/$(basename "$GITHUB_REPOSITORY")"
          image_tag="$(echo "$GITHUB_REF" | sed -E 's,^refs/tags/,,')"
          staging_image_tag="staging--$image_tag"

          # login into docker hub.
          docker login --username "$DOCKER_HUB_USER" --password-stdin <<EOF
          $DOCKER_HUB_ACCESS_TOKEN
          EOF

          # publish the image manifest tag from the staging-- tags.
          function docker-manifest-mergeish {
            docker container run --rm \
              -u "$(id -u):$(id -g)" -e HOME -v "$HOME:$HOME:ro" \
              -v /etc/docker/certs.d:/etc/docker/certs.d:ro \
              ruilopes/docker-manifest-mergeish:v0.0.1 "$@"
          }
          docker-manifest-mergeish \
            -target "$image_name:$image_tag" \
            "$image_name:$staging_image_tag-linux" \
            "$image_name:$staging_image_tag-windowsnanoserver-1809" \
            "$image_name:$staging_image_tag-windowsnanoserver-ltsc2022"

          # bail without deleting the staging-- tags.
          #exit 0

          # delete the staging-- tags.
          # NB delete is not really supported by the docker registry, so this
          #    will leave empty manifests in the registry that you have to
          #    manually delete.
          #    see https://github.com/regclient/regclient/issues/96#issuecomment-930669873
          function regctl {
            docker container run --rm --net host \
              -u "$(id -u):$(id -g)" -e HOME -v "$HOME:$HOME:ro" \
              -v /etc/docker/certs.d:/etc/docker/certs.d:ro \
              regclient/regctl:v0.4.4 "$@"
          }
          regctl tag rm "$image_name:$staging_image_tag-linux"
          regctl tag rm "$image_name:$staging_image_tag-windowsnanoserver-1809"
          regctl tag rm "$image_name:$staging_image_tag-windowsnanoserver-ltsc2022"
